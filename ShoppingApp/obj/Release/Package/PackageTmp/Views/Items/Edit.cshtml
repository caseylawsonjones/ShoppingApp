@model ShoppingApp.Models.CodeFirst.Item

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm("Edit", "Items", new { mediaURL = Model.MediaURL }, FormMethod.Post, new { enctype = "Multipart/form-data" })) {
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @* These hidden fields allow the information to be passed back to the Edit Post method without creating null values.
            It also prevents the user from modifying the fields.*@
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.CreationDate)
        @Html.HiddenFor(model => model.UpdatedDate)
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-7 col-sm-7 VerticalCenter">

                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2" style="text-align:right;">Upload Image</label>
                        <div class="col-md-10">
                            <input name="image" type="file" class="form-control No_Horizontal_Padding" style="background-color:aliceblue; border:none; outline:none;" />
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @*<textarea id="editor" class="form-control" name="Description" rows="5">@(Model.Description) </textarea>*@
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { id = "editor", @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>

                </div>

                <div class="col-md-1 col-sm-1"></div>
                <div class="col-md-4 col-sm-4 VerticalCenter">
                    <img src="@Url.Content(Model.MediaURL)" class="img-responsive" alt="Image" />
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/tinymce/tinymce.min.js"></script>
<script src="~/Scripts/tinymce/jquery.tinymce.min.js"></script>
<script type="text/javascript">  // Loads the TinyMCE Rich Text Editor and loads it for the "editor" id. 
        $(function () {
            tinymce.init({
                selector: '#editor'
            });
        });
</script>
}